import tkinter as tk
from tkinter import filedialog
#from tkinter import ttk
#from tkinter.messagebox import showinfo
import pygame
from openpyxl import load_workbook #import pygame_widgets
import xlsxwriter
import os
import math
from tkinter import *


pygame.display.set_icon(pygame.image.load('icon.png'))

crusherdata = load_workbook('Crushers.xlsx')
Kodiak300 = crusherdata['Kodiak300']
Jaw = crusherdata['Jaw']

framemax = pygame.time.Clock()

#print(layout)
f = 0
orgin = [0,0]
xst=0
xot=0
yst =0
yot = 0
xcorr=0
ycorr=0
crusher0 = [0,0]
crusher1 = [0,40]
screen1 = [20,5]
screen2 = [20,15]
screen3 = [20,25]
screen4 = [0,45]
surge1 = [0,20]
regenerate = True
running = True
solved = True
place = False
#layout = {}
click = "None"
largestid = 0
largestname = 0
locationdrop = "Location"
pendingconnection = [0,0,0,0]
gradationformat = ['-1','id','pos/size',4,3.5,3,2.75,2.5,2.25,2,1.75,1.5,1.25,1,7/8,.75,5/8,1/2,3/8,5/16,.25,"#4",5/32,"#8","#10","#16","#30","#40","#50","#100","#200"]
cutoff = [0,0,0,0,len(gradationformat)]


layout = [-1,0,3,1,400,200,9,13,17,   -1,1,5,1,600,180,1001,     -1,2,5,2,600,240,1002,    -1,3,5,3,600,300,1003,       -1,4,6,1,460,100,   -1,5,4,2,320,100,3,    -1,6,4,1,200,200,2,
          -1,7,1,2,325,225,375,175,  -1,8,1,1,200,275,275,275,          -1,9,1,5,475,210,550,180,     -1,10,1,4,475,250,550,240,     -1,11,1,3,475,280,550,300,
          -1,12,1,6,475,180,590,100,    -1,13,1,8,275,175,275,250,      -1,14,1,7,400,125,350,75,   -1,15,0,1,200,150,100]
#layout = []
#connections = [-1,6,1,8,0,  -1,8,1,7,0,     -1,0,1,12,0,     -1,0,2,9,0,     -1,0,3,10,0,    -1,0,4,11,0,   -1,13,1,7,0,    -1,5,1,13,0,   -1,7,1,0,0,   -1,9,1,1,0, -1,10,1,2,0,
#               -1,11,1,3,0,    -1,14,1,5,0,  -1,12,1,4,0,     -1,4,1,14,0,   -1,15,1,6,0]
connections = []

activegradations = []
#activegradations =  [-1,100,8,100,97,93,89,85,78,70,60,49,39,29,25,21,18,14,11,9,7,5,5,4,1,1,1,1,1,1,1]
fieldgradations = []
settledgradations = []
screenhandler = []

#0 is -1 to indicate new componant
#1 Indicates part id, unique to each componant
#2 Indiacates the part. 0 is Source, 1 is Conveyor, 2 is Splitter, 3  is Screen 4 is crusher, 5 is stockpile 6 is Surge Pile, 7 is Conveyor Connection
#Crusher types, 1 is jaw 2 is kodick 200 3 is k300 4 is k400
#css in excel

        

Background = (0,0,0)
pygame.init()
width=1500
height=750
mdisplay=pygame.display.set_mode((width, height), pygame.RESIZABLE)
opfont= pygame.font.SysFont("candara",20)
decksize= pygame.font.SysFont("candara",10)
partid= pygame.font.SysFont("candara",10)
pygame.display.set_caption("JohnFLO Hard Rock Plant")




def drawsource(x,y):
    mdisplay.blit(opfont.render("M", 1, (255,255,255)),(x-10,y-10))
    pygame.draw.circle(mdisplay, (255,255,255), (x, y-25), 2)
    pygame.draw.circle(mdisplay, (255,0,0), (x, y), 2)

    mdisplay.blit(opfont.render("Source" + str(layout[i+3]) + " " + str(layout[i+6]) + "Tons", 1, (255,255,255)),(-60+x,y-25))
        

def drawconveyor(xs,ys,xo,yo):
    pygame.draw.line(mdisplay, (255,255,255), (xs,ys), (xo,yo))
    pygame.draw.circle(mdisplay, (0,0,255), (xs, ys), 2)
    pygame.draw.circle(mdisplay, (255,0,0), (xo, yo), 2)
    mdisplay.blit(opfont.render(str(layout[i+1]) + " C "+str(layout[i+3]), 1, (255,255,255)),(-10+xs,5+ys))
    angle = math.atan(    (ys-yo)/(xs-xo-.01)   )
    angle = math.degrees(angle)
    if xo < xs:
        angle = angle + 180
    pygame.draw.line(mdisplay, (255,255,255), ((xs+xo)/2,(ys+yo)/2), ((xs+xo)/2-5*math.cos(math.radians(angle+45)),(ys+yo)/2-5*math.sin(math.radians(angle+45))))
    pygame.draw.line(mdisplay, (255,255,255), ((xs+xo)/2,(ys+yo)/2), ((xs+xo)/2-5*math.cos(math.radians(angle-45)),(ys+yo)/2-5*math.sin(math.radians(angle-45))))
def drawscreen(x,y):
    pygame.draw.line(mdisplay, (255,255,255), (-20+x,-5+y), (20+x,5+y))
    pygame.draw.line(mdisplay, (255,255,255), (-20+x,5+y), (20+x,15+y))
    pygame.draw.line(mdisplay, (255,255,255), (-20+x,15+y), (20+x,25+y))
    
    pygame.draw.line(mdisplay, (255,255,255), (-20+x,20+y), (-5+x,45+y))
    pygame.draw.line(mdisplay, (255,255,255), (20+x,30+y), (5+x,45+y))


    pygame.draw.circle(mdisplay, (0,0,255), (x, y), 2)
    pygame.draw.circle(mdisplay, (255,0,0), (20+x,5+y), 2)
    pygame.draw.circle(mdisplay, (255,0,0), (20+x,15+y), 2)
    pygame.draw.circle(mdisplay, (255,0,0), (20+x,25+y), 2)
    pygame.draw.circle(mdisplay, (255,0,0), (x, 45+y), 2)



    mdisplay.blit(opfont.render(str(layout[i+1]) + " Screen " + str(layout[i+3]), 1, (255,255,255)),(-30+x,70+y))
    mdisplay.blit(decksize.render(str(gradationformat[layout[i+6]]), 1, (255,255,255)),(x-32,y-10))
    mdisplay.blit(decksize.render(str(gradationformat[layout[i+7]]), 1, (255,255,255)),(x-32,5+y))
    mdisplay.blit(decksize.render(str(gradationformat[layout[i+8]]), 1, (255,255,255)),(x-32,20+y))
def drawstockpile(x,y):
    pygame.draw.line(mdisplay, (255,255,255), (x,y), (20+x,20+y))
    pygame.draw.line(mdisplay, (255,255,255), (x,y), (-20+x,20+y))
    pygame.draw.line(mdisplay, (255,255,255), (20+x,20+y), (-20+x,20+y))
    pygame.draw.circle(mdisplay, (0,0,255), (x,y), 2)
    mdisplay.blit(opfont.render(str(layout[i+1]) + " Stockpile"+str(layout[i+3]), 1, (255,255,255)),(-30+x,20+y))
    mdisplay.blit(opfont.render("Product: "+str(layout[i+6]), 1, (255,255,255)),(-30+x,35+y))
    

def drawsurgepile(x,y):
    pygame.draw.line(mdisplay, (255,255,255), (x,y), (20+x,20+y))
    pygame.draw.line(mdisplay, (255,255,255), (x,y), (-20+x,20+y))
    pygame.draw.line(mdisplay, (255,255,255), (20+x,20+y), (-20+x,20+y))
    pygame.draw.line(mdisplay, (255,255,255), (x+10,y+10), (x,20+y))
    pygame.draw.line(mdisplay, (255,255,255), (x-10,y+10), (x,20+y))
    pygame.draw.circle(mdisplay, (0,0,255), (x,y), 2)
    pygame.draw.circle(mdisplay, (255,0,0), (x,20+y), 2)
    mdisplay.blit(opfont.render(str(layout[i+1]) + " Surgepile "+str(layout[i+3]), 1, (255,255,255)),(-30+x,30+y))

def drawsplitter(x,y):
    pygame.draw.line(mdisplay, (255,255,255), (x-20,y), (x+20,y))
    pygame.draw.line(mdisplay, (255,255,255), (x-20,y+20), (x+20,y+20))
    pygame.draw.line(mdisplay, (255,255,255), (x-20,y), (x-20,y+20))
    pygame.draw.line(mdisplay, (255,255,255), (x+20,y), (x+20,y+20))

    pygame.draw.line(mdisplay, (255,255,255), (x,y+15), (x,y+5))

    pygame.draw.circle(mdisplay, (0,0,255), (x,y), 2)
    pygame.draw.circle(mdisplay, (255,0,0), (x-20,y+10), 2)
    pygame.draw.circle(mdisplay, (255,0,0), (x+20,y+10), 2)

def drawcrusher(x,y):
    pygame.draw.line(mdisplay, (255,255,255), (x+15,y), (x+15,y+40))
    pygame.draw.line(mdisplay, (255,255,255), (x-15,y), (x-15,y+40))

    pygame.draw.line(mdisplay, (255,255,255), (x,y), (x+10,y+40))
    pygame.draw.line(mdisplay, (255,255,255), (x,y), (x-10,y+40))
    
    pygame.draw.circle(mdisplay, (0,0,255), (x+crusher0[0],y+crusher0[1]), 2)
    pygame.draw.circle(mdisplay, (255,0,0), (x+crusher1[0],y+crusher1[1]), 2)
    mdisplay.blit(opfont.render(str(layout[i+1]) + " Crusher "+str(layout[i+3]), 1, (255,255,255)),(-30+x,30+y))
def drawconnection(xs,ys,xo,yo):
    pygame.draw.line(mdisplay, (0,255,0), (xs,ys), (xo,yo))


    angle = math.atan(    (ys-yo)/(xs-xo-.01)   )
    angle = math.degrees(angle)
    if xo < xs:
        angle = angle + 180
    pygame.draw.line(mdisplay, (0,255,0), ((xs+xo)/2,(ys+yo)/2), ((xs+xo)/2-5*math.cos(math.radians(angle+45)),(ys+yo)/2-5*math.sin(math.radians(angle+45))))
    pygame.draw.line(mdisplay, (0,255,0), ((xs+xo)/2,(ys+yo)/2), ((xs+xo)/2-5*math.cos(math.radians(angle-45)),(ys+yo)/2-5*math.sin(math.radians(angle-45))))


def menu(color,x,y):
    pygame.draw.rect(mdisplay, (125, 125, 125), (x,y,50,50))
    pygame.draw.line(mdisplay, color, (x,y), (x+50,y))
    pygame.draw.line(mdisplay, color, (x,y+50), (x+50,y+50))
    pygame.draw.line(mdisplay, color, (x,y), (x,y+50))
    pygame.draw.line(mdisplay, color, (x+50,y), (x+50,y+50))
    




while running == True:
    framemax.tick(30)

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_RIGHT:
                orgin[0] = orgin[0] + 50
                regenerate = True
            if event.key == pygame.K_LEFT:
                orgin[0] = orgin[0] - 50
                regenerate = True
            if event.key == pygame.K_UP:
                orgin[1] = orgin[1] - 50
                regenerate = True
            if event.key == pygame.K_DOWN:
                orgin[1] = orgin[1] + 50
                regenerate = True
                
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.MOUSEWHEEL:
            print(event.x, event.y)
            
       
        if event.type == pygame.MOUSEBUTTONDOWN:

            if event.button == 3:  # Check for right mouse button click
                click = "None"
                regenerate = True
            if event.button == 1:  # Check for left mouse button click
                x, y = pygame.mouse.get_pos()
                print(f"Clicked at ({x}, {y})")

    

                if click == "None":
                    for i in range (0, len(layout)):
                        if layout[i] == -1:
                            if layout[i+4] - x + orgin[0] < 10 and layout[i+4] - x + orgin[0] > -10 and layout[i+5] - y + orgin[1] < 10 and layout[i+5] - y + orgin[1] > -10:
                                if layout[i+2] == 1:
                                    click = "Edit Conveyor"
                                if layout[i+2] == 2:
                                    click = "Edit Splitter"
                                if layout[i+2] == 3:
                                    click = "Edit Screen"
                                if layout[i+2] == 4:
                                    click = "Edit Crusher"
                                if layout[i+2] == 5:
                                    click = "Edit Stockpile"

                                

                                                        
                if place == True and y > 60:
                    for i in range (0, len(layout)):
                        if layout[i] == -1:
                            if layout[i+1] > largestid:
                                largestid = layout[i+1]
                            if layout[i+3] > largestname:
                                largestname = layout[i+3]



                    if click=="Place Conveyor1":
                        layout = layout + [-1, largestid + 1, 1, largestname + 1, pendingconnection[0], pendingconnection[1], x, y]
                        click = "None"
                        place = False
                    if click=="Place Conveyor":
                        pendingconnection[0] = x
                        pendingconnection[1] = y
                        click = "Place Conveyor1"
                    if click=="Place Splitter":
                        layout = layout + [-1, largestid + 1, 2, largestname + 1, x, y]
                        click= "None"
                        place = False
                            
                    if click=="Place Screen":
                        layout = layout + [-1, largestid + 1, 3, largestname + 1, x, y, 0, 0, 0]
                        click= "None"
                        place = False
                            
                    if click=="Place Crusher":
                        layout = layout + [-1, largestid + 1, 4, largestname + 1, x, y]
                        click= "None"
                        place = False
                    if click=="Place Stock Pile":
                        layout = layout + [-1, largestid + 1, 5, largestname + 1,x, y, 1000]
                        click= "None"
                        place = False

                    if click=="Place Surge Pile":                
                        layout = layout + [-1, largestid + 1, 6,largestname + 1, x, y]
                        click= "None"
                        place = False
                    regenerate = True


                                


                        

                if click=="Delete":
                    print("connin", connections)
                    click= "None"
                    i = 0
                    print('before', connections)
                    while  i < len(layout):
                        if layout[i] == -1:

                            if layout[i+4] - x < 5 and layout[i+4] - x > -5 and layout[i+5] - y < 5 and layout[i+5] - y > -5:
                                j=0
                                while j < len(connections):
                                    if connections[j] == -1 and (connections[j+1] == layout[i+1] or connections[j+3] == layout[i+1]):
                                        print(layout[i+1], connections[j+1], connections[j+3])
                                        del connections[j]
                                        del connections[j]
                                        del connections[j]
                                        del connections[j]
                                        del connections[j]

                                        j = -5
                                    if j == len(connections) - 1  :
                                        break
                                    j = j + 5
                                        

                                while True:
                                    del layout[i]
                                    if layout[i] == -1 or i == len(layout)-1:
                                        break
                        i = i + 1
                    print('after', connections)


                    regenerate = True




                                

                if click=="ConnectionPlaceEnd":
                    click = "None"
                    
                    if pendingconnection[0] != -2:
                        for i in range (0, len(layout)):
                            if layout[i] == -1:

                                if  layout[i+4] - x < 5 and layout[i+4] - x > -5 and layout[i+5] - y < 5 and layout[i+5] - y > -5:
                                    connections = connections + [-1, pendingconnection[0], pendingconnection[1], layout[i+1],0]
                                    print("Cnnections", connections)
                                    regenerate = True
                    pendingconnection[0] = 0
                    pendingconnection[1] = 0
                    pendingconnection[2] = 0
                    pendingconnection[3] = 0


                                
                if click=="ConnectionPlaceStart":
                    click = "ConnectionPlaceEnd"
                    pendingconnection[0] = -2
                    pendingconnection[1] = -2
                    for i in range (0, len(layout)):
                        if layout[i] == -1:
                            if layout[i+2] == 1 and layout[i+6] - x < 5 and layout[i+6] -x > -5 and layout[i+7] -y < 5 and layout[i+7] - y> -5:
                                pendingconnection[0] = layout[i+1]
                                pendingconnection[1] = 1
                            if layout[i+2] == 4 and layout[i+4] - x < 5 and layout[i+4] -x > -5 and layout[i+5] -y < 5 - crusher1[1] and layout[i+5] - y> - 5 - crusher1[1]:
                                pendingconnection[0] = layout[i+1]
                                pendingconnection[1] = 1

                            if layout[i+2] == 3 and layout[i+4] - x < 5 - screen1[0] and layout[i+4] -x > -5 - screen1[0] and layout[i+5] -y < 5 - screen1[1] and layout[i+5] - y> - 5 - screen1[1]:
                                pendingconnection[0] = layout[i+1]
                                pendingconnection[1] = 1
                            if layout[i+2] == 3 and layout[i+4] - x < 5 - screen2[0] and layout[i+4] -x > -5 - screen2[0] and layout[i+5] -y < 5 - screen2[1] and layout[i+5] - y> - 5 - screen2[1]:
                                pendingconnection[0] = layout[i+1]
                                pendingconnection[1] = 2
                            if layout[i+2] == 3 and layout[i+4] - x < 5 - screen3[0] and layout[i+4] -x > -5 - screen3[0] and layout[i+5] -y < 5 - screen3[1] and layout[i+5] - y> - 5 - screen3[1]:
                                pendingconnection[0] = layout[i+1]
                                pendingconnection[1] = 3
                            if layout[i+2] == 3 and layout[i+4] - x < 5 and layout[i+4] -x > -5 and layout[i+5] -y < 5 - screen4[1] and layout[i+5] - y > - 5 - screen4[1]:
                                pendingconnection[0] = layout[i+1]
                                pendingconnection[1] = 4
                    print(pendingconnection)

                                        
                if y > 10 and y < 60 and x > 10 and x < 60:
                    click = "Place Source"
                    place = True
                if y > 10 and y < 60 and x > 70 and x < 120:
                    click = "Place Conveyor"
                    place = True
                if y > 10 and y < 60 and x > 130 and x < 180:
                    click = "Place Splitter"
                    place = True
                if y > 10 and y < 60 and x > 190 and x < 240:
                    click = "Place Screen"
                    place = True
                if y > 10 and y < 60 and x > 250 and x < 300:
                    click = "Place Crusher"
                    place = True
                if y > 10 and y < 60 and x > 310 and x < 360:
                    click = "Place Stock Pile"
                    place = True
                if y > 10 and y < 60 and x > 370 and x < 420:
                    click = "Place Surge Pile"
                    place = True
                if y > 10 and y < 60 and x > 430 and x < 480:
                    click = "Delete"
                if y > 10 and y < 60 and x > 490 and x < 540:
                    click = "ConnectionPlaceStart"
                if y > 10 and y < 60 and x > 550 and x < 600:
                    click = "Run Simulation"
                    for i in range(0,len(activegradations)):
                        del activegradations[0]
                    for i in range(0,len(settledgradations)):
                        del settledgradations[0]
            

                    for i in range(0,len(layout)):
                        if layout[i] == -1 and layout[i+2] == 0:
                            activegradations = activegradations + [-1,100,layout[i+1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
                            print(activegradations)
                    
                if y > 10 and y < 60 and x > 550 and x < 600:
                    solved = False

                if y > 10 and y < 60 and x > 610 and x < 660:
                    print("Field Gradation")

                if y > 70 and y < 120 and x > 10 and x < 70:
                    click = "Open"
                    filepath = filedialog.askopenfilename( filetypes=[("Text files", "*.txt")])                    
                    with open(filepath, 'r') as file:
                        layout = [int(num) for num in file.readline().split(',')]
                        connections = [int(num) for num in file.readline().split(',')]
                    click = "None"
                


                if y > 130 and y < 180 and x > 10 and x < 70:
                    click = "Save"
                    newlayout = filedialog.asksaveasfile(filetypes=[("Text files", "*.txt")])
                    print(newlayout)
                    
                    newlayout = str(newlayout.name)
                    with open(newlayout, 'w') as file:
                        integer_str = ", ".join(map(str, layout))
                        file.write(integer_str + "\n")
                        integer_str = ", ".join(map(str, connections))
                        file.write(str(integer_str) + "\n")
                regenerate = True
                if y > 190 and y < 240 and x > 10 and x < 70:
                    layout.clear()
                    connections.clear()


    while solved == False:

        for i in range(0,len(activegradations)):
            
            if activegradations[i] == -1:
                
                for j in range(0,len(layout)):
                    if layout[j] == -1:
                        
                        if layout[j+1] == activegradations[i+2]:
                            print("test")
                            if layout[j+2] == 3: #If Screen
                                
                                
                                for k in range(0, 4): #Move to handler
                                    for l in range(0,len(gradationformat)): 
                                        screenhandler = screenhandler + [activegradations[i+l]]
                                for k in range(0,len(gradationformat)): #Clear Active
                                    del activegradations[i]
                                
                                cutoff = [0,0,0,0,len(gradationformat)] #Find cutoffs
                                cutoff[1] = layout[j+6]
                                cutoff[2] = layout[j+7]
                                cutoff[3] = layout[j+8]

                                for k in range(0,4): #cut           #4 or 3???  
                                    if k == 0:
                                        screenhandler[k*len(gradationformat) + 1] = (100 - screenhandler[k*len(gradationformat)+cutoff[k+1]])  /100 *screenhandler[k*len(gradationformat) + 1]
                                    if k == 1:
                                        screenhandler[k*len(gradationformat) + 1] = (screenhandler[k*len(gradationformat)+cutoff[k]] - screenhandler[k*len(gradationformat)+cutoff[k+1]])/100*screenhandler[k*len(gradationformat) + 1]
                                    if k == 2:
                                        screenhandler[k*len(gradationformat) + 1] = (screenhandler[k*len(gradationformat)+cutoff[k]] - screenhandler[k*len(gradationformat)+cutoff[k+1]])/100*screenhandler[k*len(gradationformat) + 1]
                                    if k == 3:
                                        screenhandler[k*len(gradationformat) + 1] = (screenhandler[k*len(gradationformat)+cutoff[k]])/100*screenhandler[k*len(gradationformat) + 1]
                                      
                                    for l in range(0,len(gradationformat)):
                                        if l > 2:
                                            if l <= cutoff[k]:
                                                screenhandler[l+k*len(gradationformat)] = 100
                                            if l > cutoff[k+1]:
                                                screenhandler[l+k*len(gradationformat)] = 0
                                    screenhandler[2+k*len(gradationformat)] = layout[j+1]

                                
                                for k in range(0, len(connections)): #Return to active
                                    if connections[k] == -1 and connections[k+1] == layout[j+1]:
                                        if connections[k+2] == 4:
                                            screenhandler[2+3*len(gradationformat)] = connections[k+3]
                                        if connections[k+2] == 3:
                                            screenhandler[2+2*len(gradationformat)] = connections[k+3]
                                        if connections[k+2] == 2:
                                            screenhandler[2+len(gradationformat)] = connections[k+3]
                                        if connections[k+2] == 1:
                                            screenhandler[2] = connections[k+3]
                                activegradations = activegradations + screenhandler
                                
                                for k in range(0, len(screenhandler)): #Clear handler
                                    del screenhandler[0]

                                    
                            if layout[j+2] == 0: #If Source
                                print("test2")
                                for k in range(0, len(connections)):
                                    if connections[k] == -1:
                                        if connections[k+1] == activegradations[i+2]:
                                            activegradations[i+2] = connections[k+3]
                                            break
                            print(activegradations)
                                    
                            if layout[j+2] == 1: #If Conveyor
                                for k in range(0, len(connections)):
                                    if connections[k] == -1:
                                        if connections[k+1] == activegradations[i+2]:
                                            activegradations[i+2] = connections[k+3]
                                            break

                        
                            if layout[j+2] == 4: #If Crusher
                                for k in range(0, len(gradationformat)-3):
                                    activegradations[i+k+3] = Kodiak300.cell(row=2+k, column=9).value
                                    
                                for k in range(0, len(connections)):
                                    if connections[k] == -1:
                                        if connections[k+1] == activegradations[i+2]:
                                            activegradations[i+2] = connections[k+3]
                                            break
                                        

                                        
                            if layout[j+2] == 5: #If Stock
                                for k in range (0, len(gradationformat)):
                                    settledgradations = settledgradations + [activegradations[i+k]]
                                    activegradations[i+k] = 0

                                
                            if layout[j+2] == 6: #If Surge
                                for k in range(0, len(connections)):
                                    if connections[k] == -1:
                                        if connections[k+1] == activegradations[i+2]:
                                            activegradations[i+2] = connections[k+3]
                                            break

        masstotal = 0                         
        for i in range(0,len(settledgradations)):
            if settledgradations[i] == -1:
                masstotal = masstotal + settledgradations[i+1]
                print(masstotal)
                f = f + 1
                if masstotal > 99 or f == 100:
                    solved = True
                    click = "None"
                    f = 0
                

                    print("Settled", settledgradations)     



                    workbook = xlsxwriter.Workbook('Outputs.xlsx')
                    worksheet = workbook.add_worksheet("1001")


                    #print(len(settledgradations)/len(gradationformat))



                    for i in range(0, int(len(settledgradations)/len(gradationformat))):
                        letter = chr(ord('@')+i+1)
                        for j in range(0, len(gradationformat)):
                            location = str(letter) + str(j+1)
                            worksheet.write(location, settledgradations[i*len(gradationformat)+j])
                    workbook.close()

                    
        
    while regenerate == True:        
        mdisplay.fill(Background)                   #MENUs
        mdisplay.blit(opfont.render(click, 1, (255,255,255)),(10,height-60))

        color = (0,0,255)


        
        menu(color,10,10)
        mdisplay.blit(opfont.render("Source", 1, (255,255,255)),(10,30))

        
        menu(color,70,10)
        pygame.draw.line(mdisplay, (255,255,255), (80,50), (115,25))

        
        menu(color,130,10)
        pygame.draw.line(mdisplay, (255,255,255), (135,25), (175,25))
        pygame.draw.line(mdisplay, (255,255,255), (135,45), (175,45))
        pygame.draw.line(mdisplay, (255,255,255), (135,25), (135,45))
        pygame.draw.line(mdisplay, (255,255,255), (175,25), (175,45))
        pygame.draw.line(mdisplay, (255,255,255), (155,40), (155,30))
        
        menu(color,190,10)

        pygame.draw.line(mdisplay, (255,255,255), (195,40), (235,50))
        pygame.draw.line(mdisplay, (255,255,255), (195,30), (235,40))
        pygame.draw.line(mdisplay, (255,255,255), (195,20), (235,30))
        
        menu(color,250,10)
        pygame.draw.line(mdisplay, (255,255,255), (260,15), (260,55))
        pygame.draw.line(mdisplay, (255,255,255), (290,15), (290,55))
        pygame.draw.line(mdisplay, (255,255,255), (265,55), (275,15))
        pygame.draw.line(mdisplay, (255,255,255), (285,55), (275,15))

        menu(color,310,10)
        pygame.draw.line(mdisplay, (255,255,255), (335,25), (355,45))
        pygame.draw.line(mdisplay, (255,255,255), (335,25), (315,45))
        pygame.draw.line(mdisplay, (255,255,255), (315,45), (355,45))
        menu(color,370,10)
        pygame.draw.line(mdisplay, (255,255,255), (395,25), (415,45))
        pygame.draw.line(mdisplay, (255,255,255), (395,25), (375,45))
        pygame.draw.line(mdisplay, (255,255,255), (375,45), (415,45))
        pygame.draw.line(mdisplay, (255,255,255), (385,35), (395,45))
        pygame.draw.line(mdisplay, (255,255,255), (405,35), (395,45))

        color = (255, 0 ,0)
        menu(color,430,10)
        mdisplay.blit(opfont.render("Delete", 1, (255,255,255)),(430,30))


        menu(color,490,10)

        color = (0, 255 ,255)
        menu(color,550,10)
        pygame.draw.line(mdisplay, (255,255,255), (565,20), (565,50))
        pygame.draw.line(mdisplay, (255,255,255), (565,20), (585,35))
        pygame.draw.line(mdisplay, (255,255,255), (565,50), (585,35))

        menu(color,610,10)
        pygame.draw.circle(mdisplay, (255,255,255), (635, 35), 20)
        pygame.draw.circle(mdisplay, (125,125,125), (635, 35), 19)
        pygame.draw.line(mdisplay, (255,255,255), (635,15), (635,55))
        pygame.draw.line(mdisplay, (255,255,255), (645,20), (645,50))
        pygame.draw.line(mdisplay, (255,255,255), (625,20), (625,50))
        pygame.draw.line(mdisplay, (255,255,255), (615,35), (655,35))
        pygame.draw.line(mdisplay, (255,255,255), (620,45), (650,45))
        pygame.draw.line(mdisplay, (255,255,255), (620,25), (650,25))

        

        color = (255, 255 ,0)
        menu(color,10,70)
        mdisplay.blit(opfont.render("Open", 1, (255,255,255)),(12,80))

        menu(color,10,130)
        mdisplay.blit(opfont.render("Save", 1, (255,255,255)),(15,140))
        



        if click == "Edit Screen":
            pygame.draw.line(mdisplay, (255,255,255), (0,height-100), (width,height-100))

        if click == "Edit Crusher":
            pygame.draw.line(mdisplay, (255,255,255), (0,height-100), (width,height-100))
            


        if click == "Edit Stockpile":
            mdisplay.blit(opfont.render("Right Click to Exit Edit Menu", 1, (255,255,255)),(10,height-30))

            
            pygame.draw.line(mdisplay, (255,255,255), (0,height-100), (width,height-100))

            pygame.draw.line(mdisplay, (255,255,255), (width-350,height-75), (width-250,height-75))
            pygame.draw.line(mdisplay, (255,255,255), (width-350,height-50), (width-250,height-50))
            mdisplay.blit(opfont.render("Stockpile Name", 1, (255,255,255)),(width-350,height-50))
            
            pygame.draw.line(mdisplay, (255,255,255), (width-150,height-75), (width-50,height-75))
            pygame.draw.line(mdisplay, (255,255,255), (width-150,height-50), (width-50,height-50))
            mdisplay.blit(opfont.render("Product Name", 1, (255,255,255)),(width-150,height-50))





        
        for i in range (0,len(layout)):
            if layout[i] == -1:
                if layout[i+2] == 0:
                    drawsource(layout[i+4]+orgin[0],layout[i+5]+orgin[1])
                if layout[i+2] == 1:
                    drawconveyor(layout[i+4]+orgin[0],layout[i+5]+orgin[1],layout[i+6]+orgin[0],layout[i+7]+orgin[1])
                if layout[i+2] == 2:
                    drawsplitter(layout[i+4]+orgin[0],layout[i+5]+orgin[1])
                if layout[i+2] == 3:
                    drawscreen(layout[i+4]+orgin[0],layout[i+5]+orgin[1])
                if layout[i+2] == 4:
                    drawcrusher(layout[i+4]+orgin[0],layout[i+5]+orgin[1])
                if layout[i+2] == 5:
                    drawstockpile(layout[i+4]+orgin[0],layout[i+5]+orgin[1])
                if layout[i+2] == 6:
                    drawsurgepile(layout[i+4]+orgin[0],layout[i+5]+orgin[1])

        for i in range (0,len(connections)):
            if connections[i] ==  -1:
                for j in range(0,len(layout)):
                    if layout[j] == -1 and connections[i+1] == layout[j+1]:
                        adjustmentx=0
                        adjustmenty=0
                        if layout[j+2] == 1 and connections[i+2] == 1:
                            adjustmentx = layout[j+6]-layout[j+4]
                            adjustmenty = layout[j+7]-layout[j+5]
                            
                        if layout[j+2] == 3:
                            if connections[i+2] == 1:
                                adjustmentx = screen1[0]
                                adjustmenty = screen1[1]
                            if connections[i+2] == 2:
                                adjustmentx = screen2[0]
                                adjustmenty = screen2[1]
                            if connections[i+2] == 3:
                                adjustmentx = screen3[0]
                                adjustmenty = screen3[1]
                            if connections[i+2] == 4:
                                adjustmentx = screen4[0]
                                adjustmenty = screen4[1]

                                
                        if layout[j+2] == 4:
                            adjustmentx = crusher1[0]
                            adjustmenty = crusher1[1]
                        if layout[j+2] == 6:
                            adjustmentx = surge1[0]
                            adjustmenty = surge1[1]

                            
                        xs=layout[j+4] + adjustmentx
                        ys=layout[j+5] + adjustmenty
                    if layout[j] == -1 and connections[i+3] == layout[j+1]:
                        xo=layout[j+4]
                        yo=layout[j+5]
                drawconnection(xs+orgin[0],ys+orgin[1],xo+orgin[0],yo+orgin[1])

                
            

        regenerate = False
        pygame.display.update()

pygame.quit()


